# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import AccessService_pb2 as AccessService__pb2
import AccountService_pb2 as AccountService__pb2
import Common_pb2 as Common__pb2
import DepotService_pb2 as DepotService__pb2
import OrderService_pb2 as OrderService__pb2
import SecurityService_pb2 as SecurityService__pb2
import StockExchangeService_pb2 as StockExchangeService__pb2


class AccessServiceStub(object):
    """*
    Access service provides functions for the client validation / invalidation
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Login = channel.unary_unary(
                '/com.consorsbank.module.tapi.grpc.AccessService/Login',
                request_serializer=AccessService__pb2.LoginRequest.SerializeToString,
                response_deserializer=AccessService__pb2.LoginReply.FromString,
                )
        self.Logout = channel.unary_unary(
                '/com.consorsbank.module.tapi.grpc.AccessService/Logout',
                request_serializer=AccessService__pb2.LogoutRequest.SerializeToString,
                response_deserializer=AccessService__pb2.LogoutReply.FromString,
                )


class AccessServiceServicer(object):
    """*
    Access service provides functions for the client validation / invalidation
    """

    def Login(self, request, context):
        """*
        Validates client by the TAPI and gets access data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Logout(self, request, context):
        """*
        Invalidates client by the TAPI and gets logout result
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AccessServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=AccessService__pb2.LoginRequest.FromString,
                    response_serializer=AccessService__pb2.LoginReply.SerializeToString,
            ),
            'Logout': grpc.unary_unary_rpc_method_handler(
                    servicer.Logout,
                    request_deserializer=AccessService__pb2.LogoutRequest.FromString,
                    response_serializer=AccessService__pb2.LogoutReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.consorsbank.module.tapi.grpc.AccessService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AccessService(object):
    """*
    Access service provides functions for the client validation / invalidation
    """

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.consorsbank.module.tapi.grpc.AccessService/Login',
            AccessService__pb2.LoginRequest.SerializeToString,
            AccessService__pb2.LoginReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.consorsbank.module.tapi.grpc.AccessService/Logout',
            AccessService__pb2.LogoutRequest.SerializeToString,
            AccessService__pb2.LogoutReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SecurityServiceStub(object):
    """*
    Security service provides access
    to the 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSecurityInfo = channel.unary_unary(
                '/com.consorsbank.module.tapi.grpc.SecurityService/GetSecurityInfo',
                request_serializer=SecurityService__pb2.SecurityInfoRequest.SerializeToString,
                response_deserializer=SecurityService__pb2.SecurityInfoReply.FromString,
                )
        self.StreamMarketData = channel.unary_stream(
                '/com.consorsbank.module.tapi.grpc.SecurityService/StreamMarketData',
                request_serializer=SecurityService__pb2.SecurityMarketDataRequest.SerializeToString,
                response_deserializer=SecurityService__pb2.SecurityMarketDataReply.FromString,
                )
        self.StreamOrderBook = channel.unary_stream(
                '/com.consorsbank.module.tapi.grpc.SecurityService/StreamOrderBook',
                request_serializer=SecurityService__pb2.SecurityOrderBookRequest.SerializeToString,
                response_deserializer=SecurityService__pb2.SecurityOrderBookReply.FromString,
                )
        self.StreamCurrencyRate = channel.unary_stream(
                '/com.consorsbank.module.tapi.grpc.SecurityService/StreamCurrencyRate',
                request_serializer=SecurityService__pb2.CurrencyRateRequest.SerializeToString,
                response_deserializer=SecurityService__pb2.CurrencyRateReply.FromString,
                )
        self.GetSecurityPriceHistory = channel.unary_unary(
                '/com.consorsbank.module.tapi.grpc.SecurityService/GetSecurityPriceHistory',
                request_serializer=SecurityService__pb2.SecurityPriceHistoryRequest.SerializeToString,
                response_deserializer=SecurityService__pb2.SecurityPriceHistoryReply.FromString,
                )


class SecurityServiceServicer(object):
    """*
    Security service provides access
    to the 
    """

    def GetSecurityInfo(self, request, context):
        """*
        Gets security information about security
        @param SecurityInfoRequest
        Request object with interested security 
        @return SecurityInfoReply
        Complete information about security      
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamMarketData(self, request, context):
        """*
        Subscribes security with stock exchange for market data updates
        @param SecurityMarketDataRequest 
        Market data request with interested security and stock exchange
        @stream SecurityMarketDataReply
        Reply with all market data values 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamOrderBook(self, request, context):
        """*
        Subscribes security with stock exchange for orderbook updates
        @param SecurityOrderBookRequest 
        Orderbook data request with interested security and stock exchange
        @stream SecurityOrderBookReply
        Reply with all orderbook values 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamCurrencyRate(self, request, context):
        """*
        Subscribes for currency rate from one currency to another currency. 
        @param SecurityOrderBookRequest 
        currency rate request with interested currencies from/to
        @stream CurrencyRateReply
        reply with currency rate 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSecurityPriceHistory(self, request, context):
        """*
        Requests history data for one security on one stockexchange in intraday or historical format
        @param SecurityPriceHistoryRequest
        Data with security, stockexchange, how many days and resolution
        @return SecurityPriceHistoryReply
        List of the historical quotes or an error
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SecurityServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetSecurityInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSecurityInfo,
                    request_deserializer=SecurityService__pb2.SecurityInfoRequest.FromString,
                    response_serializer=SecurityService__pb2.SecurityInfoReply.SerializeToString,
            ),
            'StreamMarketData': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamMarketData,
                    request_deserializer=SecurityService__pb2.SecurityMarketDataRequest.FromString,
                    response_serializer=SecurityService__pb2.SecurityMarketDataReply.SerializeToString,
            ),
            'StreamOrderBook': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamOrderBook,
                    request_deserializer=SecurityService__pb2.SecurityOrderBookRequest.FromString,
                    response_serializer=SecurityService__pb2.SecurityOrderBookReply.SerializeToString,
            ),
            'StreamCurrencyRate': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamCurrencyRate,
                    request_deserializer=SecurityService__pb2.CurrencyRateRequest.FromString,
                    response_serializer=SecurityService__pb2.CurrencyRateReply.SerializeToString,
            ),
            'GetSecurityPriceHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSecurityPriceHistory,
                    request_deserializer=SecurityService__pb2.SecurityPriceHistoryRequest.FromString,
                    response_serializer=SecurityService__pb2.SecurityPriceHistoryReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.consorsbank.module.tapi.grpc.SecurityService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SecurityService(object):
    """*
    Security service provides access
    to the 
    """

    @staticmethod
    def GetSecurityInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.consorsbank.module.tapi.grpc.SecurityService/GetSecurityInfo',
            SecurityService__pb2.SecurityInfoRequest.SerializeToString,
            SecurityService__pb2.SecurityInfoReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamMarketData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/com.consorsbank.module.tapi.grpc.SecurityService/StreamMarketData',
            SecurityService__pb2.SecurityMarketDataRequest.SerializeToString,
            SecurityService__pb2.SecurityMarketDataReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamOrderBook(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/com.consorsbank.module.tapi.grpc.SecurityService/StreamOrderBook',
            SecurityService__pb2.SecurityOrderBookRequest.SerializeToString,
            SecurityService__pb2.SecurityOrderBookReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamCurrencyRate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/com.consorsbank.module.tapi.grpc.SecurityService/StreamCurrencyRate',
            SecurityService__pb2.CurrencyRateRequest.SerializeToString,
            SecurityService__pb2.CurrencyRateReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSecurityPriceHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.consorsbank.module.tapi.grpc.SecurityService/GetSecurityPriceHistory',
            SecurityService__pb2.SecurityPriceHistoryRequest.SerializeToString,
            SecurityService__pb2.SecurityPriceHistoryReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class StockExchangeServiceStub(object):
    """* 
    StockExchangeService provide information about stockexchanges and
    issuers
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetStockExchanges = channel.unary_unary(
                '/com.consorsbank.module.tapi.grpc.StockExchangeService/GetStockExchanges',
                request_serializer=Common__pb2.AccessTokenRequest.SerializeToString,
                response_deserializer=StockExchangeService__pb2.StockExchangeDescriptions.FromString,
                )
        self.GetStockExchange = channel.unary_unary(
                '/com.consorsbank.module.tapi.grpc.StockExchangeService/GetStockExchange',
                request_serializer=StockExchangeService__pb2.StockExchangeRequest.SerializeToString,
                response_deserializer=StockExchangeService__pb2.StockExchangeDescription.FromString,
                )


class StockExchangeServiceServicer(object):
    """* 
    StockExchangeService provide information about stockexchanges and
    issuers
    """

    def GetStockExchanges(self, request, context):
        """*
        Gets predefined stockexchages 
        @return StockExchangeDescriptions
        list of stock exchange informations 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStockExchange(self, request, context):
        """*
        Gets specific stock exchange 
        @param StockExchange
        Requested stock exchange
        @return StockExchangeDescription
        Stock exchange information 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StockExchangeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetStockExchanges': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStockExchanges,
                    request_deserializer=Common__pb2.AccessTokenRequest.FromString,
                    response_serializer=StockExchangeService__pb2.StockExchangeDescriptions.SerializeToString,
            ),
            'GetStockExchange': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStockExchange,
                    request_deserializer=StockExchangeService__pb2.StockExchangeRequest.FromString,
                    response_serializer=StockExchangeService__pb2.StockExchangeDescription.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.consorsbank.module.tapi.grpc.StockExchangeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class StockExchangeService(object):
    """* 
    StockExchangeService provide information about stockexchanges and
    issuers
    """

    @staticmethod
    def GetStockExchanges(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.consorsbank.module.tapi.grpc.StockExchangeService/GetStockExchanges',
            Common__pb2.AccessTokenRequest.SerializeToString,
            StockExchangeService__pb2.StockExchangeDescriptions.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStockExchange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.consorsbank.module.tapi.grpc.StockExchangeService/GetStockExchange',
            StockExchangeService__pb2.StockExchangeRequest.SerializeToString,
            StockExchangeService__pb2.StockExchangeDescription.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class OrderServiceStub(object):
    """*
    Order service provide functionality to control orders. 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamOrders = channel.unary_stream(
                '/com.consorsbank.module.tapi.grpc.OrderService/StreamOrders',
                request_serializer=AccountService__pb2.TradingAccountRequest.SerializeToString,
                response_deserializer=OrderService__pb2.Orders.FromString,
                )
        self.UpdateOrders = channel.unary_unary(
                '/com.consorsbank.module.tapi.grpc.OrderService/UpdateOrders',
                request_serializer=AccountService__pb2.TradingAccountRequest.SerializeToString,
                response_deserializer=Common__pb2.Empty.FromString,
                )
        self.GetQuote = channel.unary_unary(
                '/com.consorsbank.module.tapi.grpc.OrderService/GetQuote',
                request_serializer=OrderService__pb2.QuoteRequest.SerializeToString,
                response_deserializer=OrderService__pb2.QuoteReply.FromString,
                )
        self.AcceptQuote = channel.unary_unary(
                '/com.consorsbank.module.tapi.grpc.OrderService/AcceptQuote',
                request_serializer=OrderService__pb2.AcceptQuoteRequest.SerializeToString,
                response_deserializer=OrderService__pb2.OrderReply.FromString,
                )
        self.AddOrder = channel.unary_unary(
                '/com.consorsbank.module.tapi.grpc.OrderService/AddOrder',
                request_serializer=OrderService__pb2.AddOrderRequest.SerializeToString,
                response_deserializer=OrderService__pb2.OrderReply.FromString,
                )
        self.ChangeOrder = channel.unary_unary(
                '/com.consorsbank.module.tapi.grpc.OrderService/ChangeOrder',
                request_serializer=OrderService__pb2.ChangeOrderRequest.SerializeToString,
                response_deserializer=OrderService__pb2.OrderReply.FromString,
                )
        self.CancelOrder = channel.unary_unary(
                '/com.consorsbank.module.tapi.grpc.OrderService/CancelOrder',
                request_serializer=OrderService__pb2.CancelOrderRequest.SerializeToString,
                response_deserializer=OrderService__pb2.OrderReply.FromString,
                )
        self.ActivateOrder = channel.unary_unary(
                '/com.consorsbank.module.tapi.grpc.OrderService/ActivateOrder',
                request_serializer=OrderService__pb2.ActivateOrderRequest.SerializeToString,
                response_deserializer=OrderService__pb2.OrderReply.FromString,
                )
        self.DeactivateOrder = channel.unary_unary(
                '/com.consorsbank.module.tapi.grpc.OrderService/DeactivateOrder',
                request_serializer=OrderService__pb2.DeactivateOrderRequest.SerializeToString,
                response_deserializer=OrderService__pb2.OrderReply.FromString,
                )


class OrderServiceServicer(object):
    """*
    Order service provide functionality to control orders. 
    """

    def StreamOrders(self, request, context):
        """*
        Subscribes one trading account for orders updates
        @param TradingAccount 
        Trading account for push
        @stream Orders
        Orders list for seleted account 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateOrders(self, request, context):
        """*
        Initiates orders update action. All changes come by the 
        StreamOrders subscription. This function doesn't wait for the action result.
        @param TradingAccount 
        Trading account for update
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetQuote(self, request, context):
        """*
        Request market quote for the selected security on the selected stock exchanges.
        @param QuoteRequest
        quote request with interested security and stock exchanges
        @return QuoteReply
        quote reply with quotes
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AcceptQuote(self, request, context):
        """*
        Sends accept quote order request to the short term market
        @param AcceptQuoteRequest 
        accept quote request with order parameters
        @return OrderReply
        result order or error
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddOrder(self, request, context):
        """*
        Sends long term order to the market
        @param AddOrderRequest
        order request with order parameters
        @return OrderReply
        result order or error
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangeOrder(self, request, context):
        """*
        Sends order change request to the market
        @param ChangeOrderRequest
        changed order request with order parameters
        @return OrderReply
        result order or error
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelOrder(self, request, context):
        """*
        Sends order cancel request to the market
        @param CancelOrderRequest
        cancel order request with order reference
        @return OrderReply
        result order or error
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ActivateOrder(self, request, context):
        """*
        Sends order activate request to the market. #pro# only
        @param ActivateOrderRequest
        activate order request with order parameters
        @return OrderReply
        result order or error
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeactivateOrder(self, request, context):
        """*
        Sends order deactivate request to the market. #pro# only
        @param DeactivateOrderRequest
        deactivate order request with order parameters
        @return OrderReply
        result order or error
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrderServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamOrders': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamOrders,
                    request_deserializer=AccountService__pb2.TradingAccountRequest.FromString,
                    response_serializer=OrderService__pb2.Orders.SerializeToString,
            ),
            'UpdateOrders': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateOrders,
                    request_deserializer=AccountService__pb2.TradingAccountRequest.FromString,
                    response_serializer=Common__pb2.Empty.SerializeToString,
            ),
            'GetQuote': grpc.unary_unary_rpc_method_handler(
                    servicer.GetQuote,
                    request_deserializer=OrderService__pb2.QuoteRequest.FromString,
                    response_serializer=OrderService__pb2.QuoteReply.SerializeToString,
            ),
            'AcceptQuote': grpc.unary_unary_rpc_method_handler(
                    servicer.AcceptQuote,
                    request_deserializer=OrderService__pb2.AcceptQuoteRequest.FromString,
                    response_serializer=OrderService__pb2.OrderReply.SerializeToString,
            ),
            'AddOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.AddOrder,
                    request_deserializer=OrderService__pb2.AddOrderRequest.FromString,
                    response_serializer=OrderService__pb2.OrderReply.SerializeToString,
            ),
            'ChangeOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangeOrder,
                    request_deserializer=OrderService__pb2.ChangeOrderRequest.FromString,
                    response_serializer=OrderService__pb2.OrderReply.SerializeToString,
            ),
            'CancelOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelOrder,
                    request_deserializer=OrderService__pb2.CancelOrderRequest.FromString,
                    response_serializer=OrderService__pb2.OrderReply.SerializeToString,
            ),
            'ActivateOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.ActivateOrder,
                    request_deserializer=OrderService__pb2.ActivateOrderRequest.FromString,
                    response_serializer=OrderService__pb2.OrderReply.SerializeToString,
            ),
            'DeactivateOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.DeactivateOrder,
                    request_deserializer=OrderService__pb2.DeactivateOrderRequest.FromString,
                    response_serializer=OrderService__pb2.OrderReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.consorsbank.module.tapi.grpc.OrderService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OrderService(object):
    """*
    Order service provide functionality to control orders. 
    """

    @staticmethod
    def StreamOrders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/com.consorsbank.module.tapi.grpc.OrderService/StreamOrders',
            AccountService__pb2.TradingAccountRequest.SerializeToString,
            OrderService__pb2.Orders.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateOrders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.consorsbank.module.tapi.grpc.OrderService/UpdateOrders',
            AccountService__pb2.TradingAccountRequest.SerializeToString,
            Common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetQuote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.consorsbank.module.tapi.grpc.OrderService/GetQuote',
            OrderService__pb2.QuoteRequest.SerializeToString,
            OrderService__pb2.QuoteReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AcceptQuote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.consorsbank.module.tapi.grpc.OrderService/AcceptQuote',
            OrderService__pb2.AcceptQuoteRequest.SerializeToString,
            OrderService__pb2.OrderReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.consorsbank.module.tapi.grpc.OrderService/AddOrder',
            OrderService__pb2.AddOrderRequest.SerializeToString,
            OrderService__pb2.OrderReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChangeOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.consorsbank.module.tapi.grpc.OrderService/ChangeOrder',
            OrderService__pb2.ChangeOrderRequest.SerializeToString,
            OrderService__pb2.OrderReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.consorsbank.module.tapi.grpc.OrderService/CancelOrder',
            OrderService__pb2.CancelOrderRequest.SerializeToString,
            OrderService__pb2.OrderReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ActivateOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.consorsbank.module.tapi.grpc.OrderService/ActivateOrder',
            OrderService__pb2.ActivateOrderRequest.SerializeToString,
            OrderService__pb2.OrderReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeactivateOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.consorsbank.module.tapi.grpc.OrderService/DeactivateOrder',
            OrderService__pb2.DeactivateOrderRequest.SerializeToString,
            OrderService__pb2.OrderReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AccountServiceStub(object):
    """*
    AccountService provide functionality with access
    to the trading accounts  
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTradingAccounts = channel.unary_unary(
                '/com.consorsbank.module.tapi.grpc.AccountService/GetTradingAccounts',
                request_serializer=Common__pb2.AccessTokenRequest.SerializeToString,
                response_deserializer=AccountService__pb2.TradingAccounts.FromString,
                )
        self.StreamTradingAccount = channel.unary_stream(
                '/com.consorsbank.module.tapi.grpc.AccountService/StreamTradingAccount',
                request_serializer=AccountService__pb2.TradingAccountRequest.SerializeToString,
                response_deserializer=AccountService__pb2.TradingAccountInformation.FromString,
                )
        self.StreamTradingAccountTransactions = channel.unary_stream(
                '/com.consorsbank.module.tapi.grpc.AccountService/StreamTradingAccountTransactions',
                request_serializer=AccountService__pb2.TradingAccountRequest.SerializeToString,
                response_deserializer=AccountService__pb2.TradingAccountTransactions.FromString,
                )


class AccountServiceServicer(object):
    """*
    AccountService provide functionality with access
    to the trading accounts  
    """

    def GetTradingAccounts(self, request, context):
        """*
        Gets trading accounts
        @return TradingAccounts
        List of trading accounts
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamTradingAccount(self, request, context):
        """*
        Subscribes one trading account for updates
        @param TradingAccount 
        Trading account for push
        @stream TradingAccountInformation
        Specific information for subscribed account (balance, kredit line, etc.)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamTradingAccountTransactions(self, request, context):
        """*
        Subscribes one trading account for the transactions updates
        @param TradingAccount 
        Trading account for push
        @stream TradingAccountInformation
        Transactions list for subscribed account 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AccountServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTradingAccounts': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTradingAccounts,
                    request_deserializer=Common__pb2.AccessTokenRequest.FromString,
                    response_serializer=AccountService__pb2.TradingAccounts.SerializeToString,
            ),
            'StreamTradingAccount': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamTradingAccount,
                    request_deserializer=AccountService__pb2.TradingAccountRequest.FromString,
                    response_serializer=AccountService__pb2.TradingAccountInformation.SerializeToString,
            ),
            'StreamTradingAccountTransactions': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamTradingAccountTransactions,
                    request_deserializer=AccountService__pb2.TradingAccountRequest.FromString,
                    response_serializer=AccountService__pb2.TradingAccountTransactions.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.consorsbank.module.tapi.grpc.AccountService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AccountService(object):
    """*
    AccountService provide functionality with access
    to the trading accounts  
    """

    @staticmethod
    def GetTradingAccounts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.consorsbank.module.tapi.grpc.AccountService/GetTradingAccounts',
            Common__pb2.AccessTokenRequest.SerializeToString,
            AccountService__pb2.TradingAccounts.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamTradingAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/com.consorsbank.module.tapi.grpc.AccountService/StreamTradingAccount',
            AccountService__pb2.TradingAccountRequest.SerializeToString,
            AccountService__pb2.TradingAccountInformation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamTradingAccountTransactions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/com.consorsbank.module.tapi.grpc.AccountService/StreamTradingAccountTransactions',
            AccountService__pb2.TradingAccountRequest.SerializeToString,
            AccountService__pb2.TradingAccountTransactions.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class DepotServiceStub(object):
    """*
    Depot service provides access to the depot linked to the account
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamDepot = channel.unary_stream(
                '/com.consorsbank.module.tapi.grpc.DepotService/StreamDepot',
                request_serializer=AccountService__pb2.TradingAccountRequest.SerializeToString,
                response_deserializer=DepotService__pb2.DepotEntries.FromString,
                )
        self.UpdateDepot = channel.unary_unary(
                '/com.consorsbank.module.tapi.grpc.DepotService/UpdateDepot',
                request_serializer=AccountService__pb2.TradingAccountRequest.SerializeToString,
                response_deserializer=Common__pb2.Empty.FromString,
                )


class DepotServiceServicer(object):
    """*
    Depot service provides access to the depot linked to the account
    """

    def StreamDepot(self, request, context):
        """*
        Subscribes one trading account for the depot data updates
        @param TradingAccount
        Trading account for push
        @stream DepotEntries depot entries linked to the account
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateDepot(self, request, context):
        """*
        Initiates depot update action. All changes come by the 
        StreamDepot subscription. This function doesn't wait for the action result.
        @param TradingAccount 
        Trading account for update
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DepotServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamDepot': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamDepot,
                    request_deserializer=AccountService__pb2.TradingAccountRequest.FromString,
                    response_serializer=DepotService__pb2.DepotEntries.SerializeToString,
            ),
            'UpdateDepot': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDepot,
                    request_deserializer=AccountService__pb2.TradingAccountRequest.FromString,
                    response_serializer=Common__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.consorsbank.module.tapi.grpc.DepotService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DepotService(object):
    """*
    Depot service provides access to the depot linked to the account
    """

    @staticmethod
    def StreamDepot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/com.consorsbank.module.tapi.grpc.DepotService/StreamDepot',
            AccountService__pb2.TradingAccountRequest.SerializeToString,
            DepotService__pb2.DepotEntries.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateDepot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.consorsbank.module.tapi.grpc.DepotService/UpdateDepot',
            AccountService__pb2.TradingAccountRequest.SerializeToString,
            Common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
